Project structure:

Classes:

    Controller: Handles input and output from the GUI.
    Handles button presses, getting any text fields, as
    well as displaying and updating the text fields.

    MIPSController: Parses the MIPS word and sends the results
    to Controller to update the GUI

    FileHandler: Reads a line from the MIPS file and sends
    it to the MIPSController

    Main: Responsible for launching the JavaFX Window

Microcode steps:

    Load operation (ex. lw $t0, offset($at)):
    - Calculate the memory address by adding the offset to the value in $at (addi instruction)
    - Send the calculated memory address to the memory unit
    - Memory unit reads the 32-bit word from the calculated memory address
    - Store the data retrieved from memory into $t0
    - Set condition code if necessary
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    Store operation (ex. sw $t0, offset($at)):
    - Calculate the effective memory address by adding the offset to the value in $at (addi instruction)
    - Send the data from $t0 to the memory unit
    - Memory unit stores the 32-bit word into the calculated memory address
    - Set condition code if necessary
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    add (ex. add $t0, $t1, $t2):
    - send $t1 to the alu
    - send $t2 to the alu
    - alu performs addition on $t1 and $t2 (hardware circuit)
    - alu stores the 32-bit result in $t0
    - set condition code
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    subtract (ex. sub $t0, $t1, $t2):
    - send $t1 to the alu
    - send $t2 to the alu
    - alu performs subtraction on $t1 and $t2 (hardware circuit)
    - alu stores the 32-bit result in $t0
    - set condition code
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    multiply (ex. mult $t0, $t1):
    - send $t0 to the alu
    - send $t1 to the alu
    - alu performs multiplication on $t0 and $t1 (hardware circuit)
    - alu stores the 64-bit result in $mflo and $mfhi
    - set condition code
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    and (ex. AND $t0, $t1, $t2):
    - send $t1 to the alu
    - send $t2 to the alu
    - alu performs a bitwise AND operation on $t1 and $t2 (hardware circuit)
	- alu stores the 32-bit result in $t0
    - Set condition code
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    OR (ex. or $t0, $t1, $t2):
    - send $t1 to the alu
    - send $t2 to the alu
    - alu performs a bitwise OR operation on $t1 and $t2 (hardware circuit)
	- alu stores the 32-bit result in $t0
    - Set condition code
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    NOT (ex. not $t0, $t1):
    - send $t0 to the alu
    - send $t1 to the alu
    - alu performs a bitwise NOT operation on $t1 (hardware circuit)
	- alu stores the 32-bit result in $t0
	- Set condition code
    - $pc = $pc + 4 // advance the program counter b 4 bytes

    XOR (ex. XOR $t0, $t1, $t2):
    - send $t1 to the alu
    - send $t2 to the alu
    - alu performs a bitwise XOR operation on $t1 and $t2 (hardware circuit)
	- alu stores the 32-bit result in $t0
    - Set condition code
    - $pc = $pc + 4 // advance the program counter by 4 bytes

    jal (ex. jal 5000):
    - store the value of $pc in $ra
    - set $pc to 5000



    ****First come first serve, ignore SLL and SRL for now,
    Just fill them out and commit when done ****


     switch (opcode) {
                case ADD:
                    // code here
                    break;
                case ADDI:
                    // code here
                    break;
                case AND:
                    // code here
                    break;
                case ANDI:
                    // code here
                    break;
                case DIV:
                    // code here        Steven
                    break;
                case MULT:
                    // code here        Steven
                    break;
                case NOR:
                    // code here
                    break;
                case OR:
                    // code here
                    break;
                case ORI:
                    // code here
                    break;
                case SLL:
                    // code here
                    break;
                case SRL:
                    // code here
                    break;
                case SUB:
                    // code here        Steven
                    break;
                case XOR:
                    // code here
                    break;
                case XORI:
                    // code here
                    break;
                case MFHI:
                    // code here
                    break;
                case MFLO:
                    // code here
                    break;
                case LW:
                    // code here
                    break;
                case SW:
                    // code here
                    break;